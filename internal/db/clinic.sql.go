// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: clinic.sql

package db

import (
	"context"
	"database/sql"
)

const getClinicAvailableSlots = `-- name: GetClinicAvailableSlots :many
SELECT id, user_id, clinic_id, pet_id, appointment_date, appointment_time, status, created_at FROM appointments
WHERE clinic_id = $1 AND appointment_date >= NOW()
ORDER BY appointment_date, appointment_time
`

func (q *Queries) GetClinicAvailableSlots(ctx context.Context, clinicID sql.NullInt64) ([]Appointment, error) {
	rows, err := q.db.QueryContext(ctx, getClinicAvailableSlots, clinicID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Appointment{}
	for rows.Next() {
		var i Appointment
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.ClinicID,
			&i.PetID,
			&i.AppointmentDate,
			&i.AppointmentTime,
			&i.Status,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getClinicByID = `-- name: GetClinicByID :one
SELECT id, first_name, last_name, clinic_name, email, password, open_time, close_time, description, created_at FROM clinics
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetClinicByID(ctx context.Context, id int64) (Clinic, error) {
	row := q.db.QueryRowContext(ctx, getClinicByID, id)
	var i Clinic
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.ClinicName,
		&i.Email,
		&i.Password,
		&i.OpenTime,
		&i.CloseTime,
		&i.Description,
		&i.CreatedAt,
	)
	return i, err
}

const listClinics = `-- name: ListClinics :many
SELECT id, first_name, last_name, clinic_name, email, password, open_time, close_time, description, created_at FROM clinics
ORDER BY id
`

func (q *Queries) ListClinics(ctx context.Context) ([]Clinic, error) {
	rows, err := q.db.QueryContext(ctx, listClinics)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Clinic{}
	for rows.Next() {
		var i Clinic
		if err := rows.Scan(
			&i.ID,
			&i.FirstName,
			&i.LastName,
			&i.ClinicName,
			&i.Email,
			&i.Password,
			&i.OpenTime,
			&i.CloseTime,
			&i.Description,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateClinicSchedule = `-- name: UpdateClinicSchedule :one
UPDATE clinics
SET
    open_time = COALESCE($2, open_time),
    close_time = COALESCE($3, close_time)
WHERE
    id = $1
RETURNING id, first_name, last_name, clinic_name, email, password, open_time, close_time, description, created_at
`

type UpdateClinicScheduleParams struct {
	ID        int64        `json:"id"`
	OpenTime  sql.NullTime `json:"open_time"`
	CloseTime sql.NullTime `json:"close_time"`
}

func (q *Queries) UpdateClinicSchedule(ctx context.Context, arg UpdateClinicScheduleParams) (Clinic, error) {
	row := q.db.QueryRowContext(ctx, updateClinicSchedule, arg.ID, arg.OpenTime, arg.CloseTime)
	var i Clinic
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.ClinicName,
		&i.Email,
		&i.Password,
		&i.OpenTime,
		&i.CloseTime,
		&i.Description,
		&i.CreatedAt,
	)
	return i, err
}
