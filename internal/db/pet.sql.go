// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: pet.sql

package db

import (
	"context"
	"database/sql"
)

const createPet = `-- name: CreatePet :one
INSERT INTO pets (
    uuid, user_id, name, type, birth_date
) VALUES (
    $1, $2, $3, $4, $5
) RETURNING id, uuid, user_id, name, type, birth_date, created_at
`

type CreatePetParams struct {
	Uuid      sql.NullString `json:"uuid"`
	UserID    sql.NullInt64  `json:"user_id"`
	Name      sql.NullString `json:"name"`
	Type      sql.NullString `json:"type"`
	BirthDate sql.NullTime   `json:"birth_date"`
}

func (q *Queries) CreatePet(ctx context.Context, arg CreatePetParams) (Pet, error) {
	row := q.db.QueryRowContext(ctx, createPet,
		arg.Uuid,
		arg.UserID,
		arg.Name,
		arg.Type,
		arg.BirthDate,
	)
	var i Pet
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.UserID,
		&i.Name,
		&i.Type,
		&i.BirthDate,
		&i.CreatedAt,
	)
	return i, err
}

const deletePet = `-- name: DeletePet :exec
DELETE FROM pets
WHERE id = $1
`

func (q *Queries) DeletePet(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deletePet, id)
	return err
}

const getPetByID = `-- name: GetPetByID :one
SELECT id, uuid, user_id, name, type, birth_date, created_at FROM pets
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetPetByID(ctx context.Context, id int64) (Pet, error) {
	row := q.db.QueryRowContext(ctx, getPetByID, id)
	var i Pet
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.UserID,
		&i.Name,
		&i.Type,
		&i.BirthDate,
		&i.CreatedAt,
	)
	return i, err
}

const listPetsByUserID = `-- name: ListPetsByUserID :many
SELECT id, uuid, user_id, name, type, birth_date, created_at FROM pets
WHERE user_id = $1
ORDER BY id
`

func (q *Queries) ListPetsByUserID(ctx context.Context, userID sql.NullInt64) ([]Pet, error) {
	rows, err := q.db.QueryContext(ctx, listPetsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Pet{}
	for rows.Next() {
		var i Pet
		if err := rows.Scan(
			&i.ID,
			&i.Uuid,
			&i.UserID,
			&i.Name,
			&i.Type,
			&i.BirthDate,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePet = `-- name: UpdatePet :one
UPDATE pets
SET
    name = COALESCE($2, name),
    type = COALESCE($3, type),
    birth_date = COALESCE($4, birth_date)
WHERE
    id = $1
RETURNING id, uuid, user_id, name, type, birth_date, created_at
`

type UpdatePetParams struct {
	ID        int64          `json:"id"`
	Name      sql.NullString `json:"name"`
	Type      sql.NullString `json:"type"`
	BirthDate sql.NullTime   `json:"birth_date"`
}

func (q *Queries) UpdatePet(ctx context.Context, arg UpdatePetParams) (Pet, error) {
	row := q.db.QueryRowContext(ctx, updatePet,
		arg.ID,
		arg.Name,
		arg.Type,
		arg.BirthDate,
	)
	var i Pet
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.UserID,
		&i.Name,
		&i.Type,
		&i.BirthDate,
		&i.CreatedAt,
	)
	return i, err
}
