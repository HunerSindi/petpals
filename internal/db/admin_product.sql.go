// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: admin_product.sql

package db

import (
	"context"
	"database/sql"
)

const createProduct = `-- name: CreateProduct :one
INSERT INTO products (
    category_id, name, description, price
) VALUES (
    $1, $2, $3, $4
) RETURNING id, category_id, name, description, price, created_at
`

type CreateProductParams struct {
	CategoryID  sql.NullInt64  `json:"category_id"`
	Name        sql.NullString `json:"name"`
	Description sql.NullString `json:"description"`
	Price       sql.NullString `json:"price"`
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (Product, error) {
	row := q.db.QueryRowContext(ctx, createProduct,
		arg.CategoryID,
		arg.Name,
		arg.Description,
		arg.Price,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.CategoryID,
		&i.Name,
		&i.Description,
		&i.Price,
		&i.CreatedAt,
	)
	return i, err
}

const createProductImage = `-- name: CreateProductImage :one
INSERT INTO product_images (
    product_id, img_url, is_primary
) VALUES (
    $1, $2, $3
) RETURNING id, product_id, img_url, is_primary
`

type CreateProductImageParams struct {
	ProductID sql.NullInt64  `json:"product_id"`
	ImgUrl    sql.NullString `json:"img_url"`
	IsPrimary sql.NullBool   `json:"is_primary"`
}

func (q *Queries) CreateProductImage(ctx context.Context, arg CreateProductImageParams) (ProductImage, error) {
	row := q.db.QueryRowContext(ctx, createProductImage, arg.ProductID, arg.ImgUrl, arg.IsPrimary)
	var i ProductImage
	err := row.Scan(
		&i.ID,
		&i.ProductID,
		&i.ImgUrl,
		&i.IsPrimary,
	)
	return i, err
}

const deleteProduct = `-- name: DeleteProduct :exec
DELETE FROM products
WHERE id = $1
`

func (q *Queries) DeleteProduct(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteProduct, id)
	return err
}

const updateProduct = `-- name: UpdateProduct :one
UPDATE products
SET
    category_id = COALESCE($2, category_id),
    name = COALESCE($3, name),
    description = COALESCE($4, description),
    price = COALESCE($5, price)
WHERE
    id = $1
RETURNING id, category_id, name, description, price, created_at
`

type UpdateProductParams struct {
	ID          int64          `json:"id"`
	CategoryID  sql.NullInt64  `json:"category_id"`
	Name        sql.NullString `json:"name"`
	Description sql.NullString `json:"description"`
	Price       sql.NullString `json:"price"`
}

func (q *Queries) UpdateProduct(ctx context.Context, arg UpdateProductParams) (Product, error) {
	row := q.db.QueryRowContext(ctx, updateProduct,
		arg.ID,
		arg.CategoryID,
		arg.Name,
		arg.Description,
		arg.Price,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.CategoryID,
		&i.Name,
		&i.Description,
		&i.Price,
		&i.CreatedAt,
	)
	return i, err
}
