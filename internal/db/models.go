// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package db

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
)

type AppointmentStatus string

const (
	AppointmentStatusPending   AppointmentStatus = "pending"
	AppointmentStatusConfirmed AppointmentStatus = "confirmed"
	AppointmentStatusCancelled AppointmentStatus = "cancelled"
)

func (e *AppointmentStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = AppointmentStatus(s)
	case string:
		*e = AppointmentStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for AppointmentStatus: %T", src)
	}
	return nil
}

type NullAppointmentStatus struct {
	AppointmentStatus AppointmentStatus `json:"appointment_status"`
	Valid             bool              `json:"valid"` // Valid is true if AppointmentStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullAppointmentStatus) Scan(value interface{}) error {
	if value == nil {
		ns.AppointmentStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.AppointmentStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullAppointmentStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.AppointmentStatus), nil
}

type OrderStatus string

const (
	OrderStatusPending   OrderStatus = "pending"
	OrderStatusConfirmed OrderStatus = "confirmed"
	OrderStatusShipped   OrderStatus = "shipped"
	OrderStatusDelivered OrderStatus = "delivered"
	OrderStatusCancelled OrderStatus = "cancelled"
)

func (e *OrderStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = OrderStatus(s)
	case string:
		*e = OrderStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for OrderStatus: %T", src)
	}
	return nil
}

type NullOrderStatus struct {
	OrderStatus OrderStatus `json:"order_status"`
	Valid       bool        `json:"valid"` // Valid is true if OrderStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullOrderStatus) Scan(value interface{}) error {
	if value == nil {
		ns.OrderStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.OrderStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullOrderStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.OrderStatus), nil
}

type AdminUser struct {
	ID       int64  `json:"id"`
	Username string `json:"username"`
	Password string `json:"password"`
}

type Appointment struct {
	ID              int64                 `json:"id"`
	UserID          sql.NullInt64         `json:"user_id"`
	ClinicID        sql.NullInt64         `json:"clinic_id"`
	PetID           sql.NullInt64         `json:"pet_id"`
	AppointmentDate sql.NullTime          `json:"appointment_date"`
	AppointmentTime sql.NullTime          `json:"appointment_time"`
	Status          NullAppointmentStatus `json:"status"`
	CreatedAt       sql.NullTime          `json:"created_at"`
}

type Category struct {
	ID     int64          `json:"id"`
	Name   sql.NullString `json:"name"`
	ImgUrl sql.NullString `json:"img_url"`
}

type Clinic struct {
	ID          int64          `json:"id"`
	FirstName   sql.NullString `json:"first_name"`
	LastName    sql.NullString `json:"last_name"`
	ClinicName  sql.NullString `json:"clinic_name"`
	Email       sql.NullString `json:"email"`
	Password    sql.NullString `json:"password"`
	OpenTime    sql.NullTime   `json:"open_time"`
	CloseTime   sql.NullTime   `json:"close_time"`
	Description sql.NullString `json:"description"`
	CreatedAt   sql.NullTime   `json:"created_at"`
}

type ClinicImage struct {
	ID       int64         `json:"id"`
	ClinicID sql.NullInt64 `json:"clinic_id"`
	ImgUrl   string        `json:"img_url"`
}

type ClinicLocation struct {
	ID       int64          `json:"id"`
	ClinicID sql.NullInt64  `json:"clinic_id"`
	Address  sql.NullString `json:"address"`
	City     sql.NullString `json:"city"`
	Phone    sql.NullString `json:"phone"`
}

type Order struct {
	ID              int64           `json:"id"`
	UserID          sql.NullInt64   `json:"user_id"`
	TotalAmount     sql.NullString  `json:"total_amount"`
	Status          NullOrderStatus `json:"status"`
	DeliveryAddress sql.NullString  `json:"delivery_address"`
	OrderDate       sql.NullTime    `json:"order_date"`
	DeliveredAt     sql.NullTime    `json:"delivered_at"`
}

type OrderItem struct {
	ID        int64          `json:"id"`
	OrderID   sql.NullInt64  `json:"order_id"`
	ProductID sql.NullInt64  `json:"product_id"`
	Quantity  sql.NullInt32  `json:"quantity"`
	Price     sql.NullString `json:"price"`
}

type Pet struct {
	ID        int64          `json:"id"`
	Uuid      sql.NullString `json:"uuid"`
	UserID    sql.NullInt64  `json:"user_id"`
	Name      sql.NullString `json:"name"`
	Type      sql.NullString `json:"type"`
	BirthDate sql.NullTime   `json:"birth_date"`
	CreatedAt sql.NullTime   `json:"created_at"`
}

type Product struct {
	ID          int64          `json:"id"`
	CategoryID  sql.NullInt64  `json:"category_id"`
	Name        sql.NullString `json:"name"`
	Description sql.NullString `json:"description"`
	Price       sql.NullString `json:"price"`
	CreatedAt   sql.NullTime   `json:"created_at"`
}

type ProductImage struct {
	ID        int64          `json:"id"`
	ProductID sql.NullInt64  `json:"product_id"`
	ImgUrl    sql.NullString `json:"img_url"`
	IsPrimary sql.NullBool   `json:"is_primary"`
}

type User struct {
	ID        int64          `json:"id"`
	FirstName sql.NullString `json:"first_name"`
	LastName  sql.NullString `json:"last_name"`
	Phone     sql.NullString `json:"phone"`
	Email     sql.NullString `json:"email"`
	Password  sql.NullString `json:"password"`
	CreatedAt sql.NullTime   `json:"created_at"`
}

type UserAddress struct {
	ID           int64          `json:"id"`
	UserID       sql.NullInt64  `json:"user_id"`
	AddressLine1 sql.NullString `json:"address_line1"`
	AddressLine2 sql.NullString `json:"address_line2"`
	City         sql.NullString `json:"city"`
	State        sql.NullString `json:"state"`
	PostalCode   sql.NullString `json:"postal_code"`
	IsDefault    sql.NullBool   `json:"is_default"`
}
