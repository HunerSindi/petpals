// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: admin_clinic.sql

package db

import (
	"context"
	"database/sql"
)

const createClinic = `-- name: CreateClinic :one
INSERT INTO clinics (
    first_name, last_name, clinic_name, email, password, open_time, close_time, description
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8
) RETURNING id, first_name, last_name, clinic_name, email, password, open_time, close_time, description, created_at
`

type CreateClinicParams struct {
	FirstName   sql.NullString `json:"first_name"`
	LastName    sql.NullString `json:"last_name"`
	ClinicName  sql.NullString `json:"clinic_name"`
	Email       sql.NullString `json:"email"`
	Password    sql.NullString `json:"password"`
	OpenTime    sql.NullTime   `json:"open_time"`
	CloseTime   sql.NullTime   `json:"close_time"`
	Description sql.NullString `json:"description"`
}

func (q *Queries) CreateClinic(ctx context.Context, arg CreateClinicParams) (Clinic, error) {
	row := q.db.QueryRowContext(ctx, createClinic,
		arg.FirstName,
		arg.LastName,
		arg.ClinicName,
		arg.Email,
		arg.Password,
		arg.OpenTime,
		arg.CloseTime,
		arg.Description,
	)
	var i Clinic
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.ClinicName,
		&i.Email,
		&i.Password,
		&i.OpenTime,
		&i.CloseTime,
		&i.Description,
		&i.CreatedAt,
	)
	return i, err
}

const deleteClinic = `-- name: DeleteClinic :exec
DELETE FROM clinics
WHERE id = $1
`

func (q *Queries) DeleteClinic(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteClinic, id)
	return err
}
