// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: address.sql

package db

import (
	"context"
	"database/sql"
)

const createUserAddress = `-- name: CreateUserAddress :one
INSERT INTO user_addresses (
    user_id, address_line1, address_line2, city, state, postal_code, is_default
) VALUES (
    $1, $2, $3, $4, $5, $6, $7
) RETURNING id, user_id, address_line1, address_line2, city, state, postal_code, is_default
`

type CreateUserAddressParams struct {
	UserID       sql.NullInt64  `json:"user_id"`
	AddressLine1 sql.NullString `json:"address_line1"`
	AddressLine2 sql.NullString `json:"address_line2"`
	City         sql.NullString `json:"city"`
	State        sql.NullString `json:"state"`
	PostalCode   sql.NullString `json:"postal_code"`
	IsDefault    sql.NullBool   `json:"is_default"`
}

func (q *Queries) CreateUserAddress(ctx context.Context, arg CreateUserAddressParams) (UserAddress, error) {
	row := q.db.QueryRowContext(ctx, createUserAddress,
		arg.UserID,
		arg.AddressLine1,
		arg.AddressLine2,
		arg.City,
		arg.State,
		arg.PostalCode,
		arg.IsDefault,
	)
	var i UserAddress
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.AddressLine1,
		&i.AddressLine2,
		&i.City,
		&i.State,
		&i.PostalCode,
		&i.IsDefault,
	)
	return i, err
}

const deleteUserAddress = `-- name: DeleteUserAddress :exec
DELETE FROM user_addresses
WHERE id = $1
`

func (q *Queries) DeleteUserAddress(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteUserAddress, id)
	return err
}

const getUserAddressByID = `-- name: GetUserAddressByID :one
SELECT id, user_id, address_line1, address_line2, city, state, postal_code, is_default FROM user_addresses
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUserAddressByID(ctx context.Context, id int64) (UserAddress, error) {
	row := q.db.QueryRowContext(ctx, getUserAddressByID, id)
	var i UserAddress
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.AddressLine1,
		&i.AddressLine2,
		&i.City,
		&i.State,
		&i.PostalCode,
		&i.IsDefault,
	)
	return i, err
}

const listUserAddressesByUserID = `-- name: ListUserAddressesByUserID :many
SELECT id, user_id, address_line1, address_line2, city, state, postal_code, is_default FROM user_addresses
WHERE user_id = $1
ORDER BY id
`

func (q *Queries) ListUserAddressesByUserID(ctx context.Context, userID sql.NullInt64) ([]UserAddress, error) {
	rows, err := q.db.QueryContext(ctx, listUserAddressesByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []UserAddress{}
	for rows.Next() {
		var i UserAddress
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.AddressLine1,
			&i.AddressLine2,
			&i.City,
			&i.State,
			&i.PostalCode,
			&i.IsDefault,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUserAddress = `-- name: UpdateUserAddress :one
UPDATE user_addresses
SET
    address_line1 = COALESCE($2, address_line1),
    address_line2 = COALESCE($3, address_line2),
    city = COALESCE($4, city),
    state = COALESCE($5, state),
    postal_code = COALESCE($6, postal_code),
    is_default = COALESCE($7, is_default)
WHERE
    id = $1
RETURNING id, user_id, address_line1, address_line2, city, state, postal_code, is_default
`

type UpdateUserAddressParams struct {
	ID           int64          `json:"id"`
	AddressLine1 sql.NullString `json:"address_line1"`
	AddressLine2 sql.NullString `json:"address_line2"`
	City         sql.NullString `json:"city"`
	State        sql.NullString `json:"state"`
	PostalCode   sql.NullString `json:"postal_code"`
	IsDefault    sql.NullBool   `json:"is_default"`
}

func (q *Queries) UpdateUserAddress(ctx context.Context, arg UpdateUserAddressParams) (UserAddress, error) {
	row := q.db.QueryRowContext(ctx, updateUserAddress,
		arg.ID,
		arg.AddressLine1,
		arg.AddressLine2,
		arg.City,
		arg.State,
		arg.PostalCode,
		arg.IsDefault,
	)
	var i UserAddress
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.AddressLine1,
		&i.AddressLine2,
		&i.City,
		&i.State,
		&i.PostalCode,
		&i.IsDefault,
	)
	return i, err
}
